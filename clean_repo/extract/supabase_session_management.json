{"extracted_information": "Supabase Auth provides fine-grained control over user sessions, catering to security-sensitive applications requiring SOC 2, HIPAA, PCI-DSS, or ISO27000 compliance.", "specifications": {"access_token_default_lifetime": "Between 5 minutes and 1 hour", "refresh_token_expiration": "Never expires (but single-use)", "refresh_token_reuse_interval": "10 seconds (default)", "recommended_jwt_expiration": "1 hour (default)", "minimum_recommended_jwt_expiration": "5 minutes"}, "pricing": {}, "features": [{"name": "Session Definition", "description": "A session is created when a user signs in. By default, it lasts indefinitely, and a user can have an unlimited number of active sessions across devices. It's represented by a Supabase Auth access token (JWT) and a unique refresh token."}, {"name": "Access Token (JWT) Claims", "description": "Every access token contains a `session_id` claim (UUID), uniquely identifying the session. This ID correlates with the primary key of the `auth.sessions` table."}, {"name": "Session Initiation", "description": "A session is initiated upon user sign-in. The session is stored in the `auth.sessions` table, and the application receives access and refresh tokens."}, {"name": "Session Termination Conditions", "description": "A session terminates when: user signs out, user changes password or performs a security-sensitive action, times out due to inactivity, reaches its maximum lifetime, or a user signs in on another device (if single-session enforced)."}, {"name": "Session Lifetime Limiting", "options": [{"type": "Time-boxed sessions", "description": "Terminate after a fixed amount of time. Configurable via 'Time-box user sessions' in Auth settings. Ensures periodic re-authentication."}, {"type": "Inactivity timeout", "description": "Terminates sessions not refreshed within a specified duration. Configurable via 'Inactivity timeout' in Auth settings."}, {"type": "Single-session per user", "description": "Only keeps the most recently active session, terminating others. Configurable via 'Single session per user' in Auth settings. Effect observed at JWT expiration intervals."}], "notes": "Session checks are enforced upon refresh. Actual duration is configured timeout + JWT expiration time. Sessions are progressively deleted from the database 24 hours after expiration."}, {"name": "Automatic Refresh Mechanisms", "description": "Access tokens are short-lived, while refresh tokens never expire but are single-use. Exchanging a refresh token for a new access and refresh token pair is called 'refreshing the session'. Supabase client libraries proactively refresh sessions."}, {"name": "Refresh Token Reuse Detection", "description": "Protects against stolen refresh tokens. General rule: refresh token used once. Exceptions allow reuse within a 10-second interval (for server-side rendering, serializing access issues) or if the parent token is reused (for client-side network unreliability). If reuse is outside exceptions, the session is terminated and all tokens revoked. Can be disabled in Advanced Settings, but not recommended."}, {"name": "JWT Expiration Configuration Recommendations", "description": "Default of 1 hour is recommended for most applications. Setting over 1 hour is discouraged for security. Values below 5 minutes (especially 2 minutes) are generally not recommended because: increase load on Auth server, cause difficult-to-debug errors due to clock skew, hinder proactive session refreshing by client libraries, and may invalidate tokens mid-request."}, {"name": "Ensuring Access Token Cannot Be Used After Sign Out", "description": "When a user signs out, affected sessions are removed from the `auth.sessions` table. Applications can validate the `session_id` claim in the JWT against this table. If the row doesn't exist, the user is logged out. Sessions are not proactively terminated when max lifetime/inactivity timeout reached; cleanup occurs 24 hours later."}, {"name": "HTTP-only Cookies for Tokens", "description": "Feasible only for traditional server-only web apps. Not feasible for client-side JavaScript apps as browser won't access tokens. Supabase JavaScript libraries provide limited support; can override `storage` option on the server to use `getItem`, `setItem`, `removeItem` (sync/async) from a custom `Storage` interface. Cookie `Expires` or `Max-Age` should be set far into future to let Supabase Auth control token validity."}], "statistics": {}, "temporal_info": {"jwt_refresh_interval": "Supabase client libraries always try to refresh the session ahead of time.", "session_cleanup_after_expiration": "24 hours progressively deleted from database after expiration"}, "geographical_data": {}, "references": ["Auth settings dashboard: /dashboard/project/_/settings/auth", "MDN Web Docs: Storage interface", "MDN Web Docs: Set-Cookie attributes"]}